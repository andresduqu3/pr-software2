/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views.Cassandra;

import javax.swing.JDesktopPane;

import Controladores.CassandraControlador;
import Controladores.RedisControlador;
import Cassandra.DTO.DTO_Persona;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.*;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 * @Autor Samuel
 */
public class Informes_Cassandra extends javax.swing.JInternalFrame {
    private int cont;
    private int num = 0;

    /**
     * Creates new form migrando
     */
    JDesktopPane desktopPane;

    public Informes_Cassandra() {
        initComponents();
    }

    public Informes_Cassandra(JDesktopPane desktopPane, int aux) {
        cont = aux;
        initComponents();
        this.desktopPane = desktopPane;
        CassandraControlador MC = new CassandraControlador();
        if(cont == 5){
            for (DTO_Persona dto: MC.ReadPersonasI() ) {
                num += 1;
                jTextArea1.append(dto.toStringI3()); 
            }       
        }else if(cont == 6){
            for (DTO_Persona dto: MC.ReadPersonasI() ) {
                num += 1;
                jTextArea1.append(dto.toStringI3()); 
            }           
            RedisControlador RC = new RedisControlador();
            
            RC.conectarREDIS();
            
            String[][] datosredis = RC.listarEmpleadosREDIS();
            
            RC.desconectarREDIS();
            
            for(int i=0;i<datosredis.length; i++){
                for(int j=0;j<datosredis[0].length; j++){
                    jTextArea1.append(datosredis[i][j]);
                }
                jTextArea1.append("\n");

            }
        }else{
            for (DTO_Persona dto: MC.ReadPersonas() ) {
                if(cont == 1){
                    num += 1;
                    jTextArea1.append(dto.toString());
                    
                }else if(cont == 2){
                    num += 1;
                    jTextArea1.append(dto.toStringI2());

                }else if(cont == 3){
                    num += 1;
                    jTextArea1.append(dto.toStringI3());
                    
                }else if(cont == 4){
                    num += 1;
                    jTextArea1.append(dto.toStringI4());
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Generar PDF");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (cont == 1){
            Document documento = new Document();
            String nombre = "Informe_Total.pdf";

            try {
                PdfWriter.getInstance(documento, new FileOutputStream("./Informes/" + nombre));
                documento.open();

                PdfPTable tabla = new PdfPTable(7);


                CassandraControlador MC = new CassandraControlador();

                tabla.addCell("Id");
                tabla.addCell("Nombre");
                tabla.addCell("Telefono");
                tabla.addCell("Carrera");
                tabla.addCell("Promedio");
                tabla.addCell("Genero favorito");
                tabla.addCell("Libro favorito");

                for (DTO_Persona dto: MC.ReadPersonas() ) {
                    tabla.addCell(dto.toString().split(", ")[0]);
                    tabla.addCell(dto.toString().split(", ")[1]);
                    tabla.addCell(dto.toString().split(", ")[2]);
                    tabla.addCell(dto.toString().split(", ")[3]);
                    tabla.addCell(dto.toString().split(", ")[4]);
                    tabla.addCell(dto.toString().split(", ")[5]);
                    tabla.addCell(dto.toString().split(", ")[6]);
                }

                documento.add(tabla);
                documento.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.dispose();
        }else if (cont == 2){
            Document documento = new Document();
            String nombre = "Informe_Personal.pdf";

            try {
                PdfWriter.getInstance(documento, new FileOutputStream("./Informes/" + nombre));
                documento.open();

                PdfPTable tabla = new PdfPTable(3);

                CassandraControlador MC = new CassandraControlador();

                tabla.addCell("Id");
                tabla.addCell("Nombre");
                tabla.addCell("Telefono");

                for (DTO_Persona dto: MC.ReadPersonas() ) {
                    tabla.addCell(dto.toStringI2().split(", ")[0]);
                    tabla.addCell(dto.toStringI2().split(", ")[1]);
                    tabla.addCell(dto.toStringI2().split(", ")[2]);
                }

                documento.add(tabla);
                documento.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.dispose();
        }else if (cont == 3){
            Document documento = new Document();
            String nombre = "Informe_Academico.pdf";

            try {
                PdfWriter.getInstance(documento, new FileOutputStream("./Informes/" + nombre));
                documento.open();

                PdfPTable tabla = new PdfPTable(3);

                CassandraControlador MC = new CassandraControlador();

                tabla.addCell("Id");
                tabla.addCell("Carrera");
                tabla.addCell("Promedio");

                for (DTO_Persona dto: MC.ReadPersonas() ) {
                    tabla.addCell(dto.toStringI3().split(", ")[0]);
                    tabla.addCell(dto.toStringI3().split(", ")[1]);
                    tabla.addCell(dto.toStringI3().split(", ")[2]);
                }

                documento.add(tabla);
                documento.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.dispose();
        }else if (cont == 4){
            Document documento = new Document();
            String nombre = "Informe_Literario.pdf";

            try {
                PdfWriter.getInstance(documento, new FileOutputStream("./Informes/" + nombre));
                documento.open();

                PdfPTable tabla = new PdfPTable(3);

                CassandraControlador MC = new CassandraControlador();

                tabla.addCell("Id");
                tabla.addCell("Genero favorito");
                tabla.addCell("Libro favorito");

                for (DTO_Persona dto: MC.ReadPersonas() ) {
                    tabla.addCell(dto.toStringI4().split(", ")[0]);
                    tabla.addCell(dto.toStringI4().split(", ")[1]);
                    tabla.addCell(dto.toStringI4().split(", ")[2]);
                }

                documento.add(tabla);
                documento.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.dispose();
        }else if (cont == 5){
            Document documento = new Document();
            String nombre = "Informe_Academico_Pasable.pdf";

            try {
                PdfWriter.getInstance(documento, new FileOutputStream("./Informes/" + nombre));
                documento.open();

                PdfPTable tabla = new PdfPTable(3);


                CassandraControlador MC = new CassandraControlador();

                tabla.addCell("Id");
                tabla.addCell("Carrera");
                tabla.addCell("Promedio");

                for (DTO_Persona dto: MC.ReadPersonas() ) {
                    tabla.addCell(dto.toStringI3().split(", ")[0]);
                    tabla.addCell(dto.toStringI3().split(", ")[1]);
                    tabla.addCell(dto.toStringI3().split(", ")[2]);
                }

                documento.add(tabla);
                documento.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.dispose();
        }else if (cont == 6){
            Document documento = new Document();
            String nombre = "Informe_Hibrido_Cassandra_Redis.pdf";

            try {
                PdfWriter.getInstance(documento, new FileOutputStream("./Informes/" + nombre));
                documento.open();

                PdfPTable tabla = new PdfPTable(3);


                CassandraControlador MC = new CassandraControlador();

                tabla.addCell("Id");
                tabla.addCell("Carrera");
                tabla.addCell("Promedio");

                for (DTO_Persona dto: MC.ReadPersonas() ) {
                    tabla.addCell(dto.toStringI3().split(", ")[0]);
                    tabla.addCell(dto.toStringI3().split(", ")[1]);
                    tabla.addCell(dto.toStringI3().split(", ")[2]);
                }

                documento.add(tabla);
                
                PdfPTable tabla2 = new PdfPTable(3);


                RedisControlador RC = new RedisControlador();
                RC.conectarREDIS();

                String[][] datosredis = RC.listarEmpleadosREDIS();

                for(int i=0;i<datosredis.length; i++){
                    for(int j=0;j<datosredis[0].length; j++){
                        tabla2.addCell(datosredis[i][j]);
                    }
                }

                documento.add(tabla2);
                RC.desconectarREDIS();
                
                documento.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(Informes_Cassandra.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Informes_Cassandra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Informes_Cassandra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Informes_Cassandra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Informes_Cassandra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Informes_Cassandra().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
